<?php
namespace bizySoft\bizyStore\model\core;

/**
 * The Schema class provides the generic methods to allow interaction of a Model object with a database in the form of
 * schema information. Derived classes handle column-meta data, key information and table names. It should not be confused 
 * with SchemaI, which is a Model interface.
 *
 * There is usually a lot of discussion about how tables/columns should be named especially in regard to the class names
 * generated by software such as bizyStore. bizyStore in no way enforces a naming convention with regard to database 
 * tables/columns but it does have a rule when generating classes:
 *
 * UPPERCASE THE FIRST LETTER OF THE TABLE NAME WHEN CONVERTING TO A CLASS NAME, that's it.
 *
 * So "members" becomes "Members", "member" becomes "Member" and "Member" stays as "Member". Even for this simple
 * case, we have to map the table name to the database for those that are case sensitive.
 *
 * Assuming that we can singularise is not wise, it will produce further problems for databases that have both plural
 * and singular forms of which, in the unlikely case, a definite mapping cannot be made.
 *
 * The use of camelCase table/column names is consistent with object oriented programming practices, but is
 * not a requirement of bizyStore. Bear in mind that class names are generated from database table names and property
 * names are the declared column name.
 *
 * Naming conventions, especially table names, should at least be consistent across databases. It does NOT matter if
 * multiple databases have the same table name, bizyStore handles that in the generated Schema files. Additionally for
 * this case, the schema of a shared table name does NOT have to be the same, each database can specify different
 * column names and column properties.
 *
 * <span style="color:orange">If you find our software helpful, the best way to contribute
 * is to hire us to work for you. </span> Details at <a href="http://www.bizysoft.com.au">http://www.bizysoft.com.au</a>
 *
 * @author Chris Maude, chris@bizysoft.com.au
 * @copyright Copyright (c) 2016, bizySoft
 * @license http://www.bizysoft.com.au/LICENSE.html GNU GPL. See the LICENSE file with this distribution.
 */
abstract class Schema
{
	protected $schema = null;

	/**
	 * All Schema's are constructed with an array keyed on the database &lt;id&gt; from the bizySoftConfig file. Derived classes
	 * model different schema aspects such as column meta-data, primary keys, foreign keys etc....
	 * 
	 * Derived Schema instances are constructed under controlled conditions from the generated Model classes.
	 * 
	 * @param array $schema
	 */
	public function __construct(array $schema)
	{
		$this->schema = $schema;
	}
	
	/**
	 * Gets the schema data for a Model based on dbId or the whole schema if no dbId is specified.
	 * 
	 * @param string $dbId
	 * @return array
	 */
	public function get($dbId = null)
	{
		return $dbId ? (isset($this->schema[$dbId]) ? $this->schema[$dbId] : array()) : $this->schema;
	}
	
	/**
	 * Is the property part of this Schema?
	 * 
	 * This is the most common and the default implementation for those Schemas that are further indexed under a name
	 * which can have more than one property associated with it.
	 * 
	 * ie. ForeignKeySchema, ForeignKeyRefereeSchema, KeyCandidiateSchema, PrimaryKeySchema, UniqueKeySchema.
	 * 
	 * Override for specialist processing.
	 * 
	 * @param string $dbId
	 * @param string $property
	 * @return bool
	 */
	public function is($dbId, $property)
	{
		foreach($this->get($dbId) as $indexName => $properties)
		{
			if(isset($properties[$property]))
			{
				return true;
			}
		}
		return false;
	}
	
	/**
	 * Generic function to determine if the $keys have a representation in the $masterKeySet.
	 * 
	 * This schema is an array of masterKeySets.
	 * 
	 * This is the most common and the default implementation for those Schemas that are further indexed under a name
	 * which can have more than one property associated with it.
	 * 
	 * ie. ForeignKeySchema, ForeignKeyRefereeSchema, KeyCandidiateSchema, PrimaryKeySchema, UniqueKeySchema.
	 * 
	 * Override for specialist processing.
	 *
	 * @param array $masterKeySet the array of keys in this schema for a particular db. You can get this via get($dbId).
	 * @param array $keys
	 */
	public function keyExists(array $masterKeySet, array $keys)
	{
		foreach($masterKeySet as $masterKeys)
		{
			$intersect = array_intersect_key($masterKeys, $keys);
			if (!array_diff_key($masterKeys, $intersect))
			{
				return true;
			}
		}
		return false;
	}
}
?>
